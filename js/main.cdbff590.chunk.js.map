{"version":3,"sources":["components/ButtonTag.tsx","components/Search.tsx","components/Filter.tsx","components/Loading.tsx","components/ButtonPrimary.tsx","components/Meeting.tsx","components/NoResults.tsx","helpers/config.ts","helpers/data.ts","App.tsx","helpers/query.ts","helpers/filter.ts","index.tsx"],"names":["ButtonTag","filter","tag","toggleTag","Button","bg","checked","border","borderColor","color","mr","my","onClick","e","size","_hover","Search","search","setSearch","searchField","useRef","InputGroup","Icon","name","Input","aria-label","placeholder","onChange","target","value","toLowerCase","split","ref","length","IconButton","icon","_active","current","focus","Filter","setTimezone","state","useState","open","setOpen","Stack","spacing","xs","md","FormControl","d","Object","keys","filters","map","index","key","as","Select","iconSize","currentTarget","timezone","moment","tz","names","rightIcon","variant","w","Loading","Box","alignItems","height","justifyContent","Spinner","ButtonPrimary","text","title","Meeting","meeting","tags","mb","p","rounded","shadow","Heading","lg","fontSize","searchWords","textToHighlight","fontWeight","ml","time","format","buttons","button","float","notes","paragraph","Text","Tag","includes","NoResults","flat","Alert","flexDirection","py","align","dataUrl","process","days","videoServices","BlueJeans","FreeConferenceCall","GoToMeeting","Skype","WebEx","Zoho","Zoom","arrayToTagsArray","array","values","stringToTrimmedArray","str","sep","val","trim","warn","type","line","console","App","Days","Times","Formats","Types","limit","loading","meetings","setState","forEach","fetch","then","result","json","data","formats","types","i","feed","entry","updated","originalUrl","label","url","URL","host","hostname","service","domain","endsWith","replace","push","window","originalPhone","phone","accessCode","email","test","validateEmail","meeting_formats","concat","meeting_types","join","times","timestring","isValid","sort","query","location","substr","pair","decodeURIComponent","guess","load","checkedValues","encodeURIComponent","history","pushState","pathname","setQuery","filteredMeetings","now","diff","add","word","a","b","isSame","isAfter","localeCompare","customTheme","theme","icons","video","path","fill","ThemeProvider","CSSReset","maxW","minH","mx","Grid","gap","templateColumns","order","overflow","loadMore","hasMore","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdbff590.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@chakra-ui/core';\n\nimport { Tag } from '../helpers/data';\n\ntype ButtonTag = {\n  filter: string;\n  tag: Tag;\n  toggleTag: (filter: string, value: string, checked: boolean) => void;\n};\n\nexport function ButtonTag({ filter, tag, toggleTag }: ButtonTag) {\n  return (\n    <Button\n      bg={tag.checked ? 'gray.900' : 'gray.100'}\n      border=\"1px\"\n      borderColor=\"gray.200\"\n      color={tag.checked ? 'gray.100' : 'gray.600'}\n      mr={2}\n      my={1}\n      onClick={e => {\n        toggleTag(filter, tag.tag, !tag.checked);\n      }}\n      size=\"sm\"\n      _hover={{\n        bg: tag.checked ? 'gray.800' : 'gray.200',\n        color: tag.checked ? 'gray.100' : 'gray.600'\n      }}\n    >\n      {tag.tag}\n    </Button>\n  );\n}\n","import React, { ChangeEvent, useRef } from 'react';\nimport {\n  Icon,\n  IconButton,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement\n} from '@chakra-ui/core';\n\ntype Search = {\n  setSearch: (search: string[]) => void;\n  search: string[];\n};\n\nexport function Search({ search, setSearch }: Search) {\n  const searchField = useRef<HTMLInputElement>(null);\n  return (\n    <InputGroup borderColor=\"gray.300\">\n      <InputLeftElement>\n        <Icon color=\"gray.300\" name=\"search-2\" />\n      </InputLeftElement>\n      <Input\n        aria-label=\"Search\"\n        placeholder=\"Search\"\n        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n          setSearch(\n            e.target.value\n              .toLowerCase()\n              .split(' ')\n              .filter(e => e)\n          );\n        }}\n        ref={searchField}\n      />\n      {!!search.length && (\n        <InputRightElement>\n          <IconButton\n            aria-label=\"Clear search\"\n            bg=\"transparent\"\n            color=\"gray.300\"\n            icon=\"small-close\"\n            _active={{ bg: 'transparent', color: 'gray.500' }}\n            _hover={{ bg: 'transparent', color: 'gray.500' }}\n            onClick={() => {\n              setSearch([]);\n              if (searchField.current) {\n                searchField.current.value = '';\n                searchField.current.focus();\n              }\n            }}\n          ></IconButton>\n        </InputRightElement>\n      )}\n    </InputGroup>\n  );\n}\n","import React, { useState } from 'react';\nimport moment from 'moment-timezone';\nimport { Button, FormControl, Select, Stack } from '@chakra-ui/core';\n\nimport { ButtonTag } from './ButtonTag';\nimport { Search } from './Search';\nimport { State, Tag } from '../helpers/data';\n\ntype Filter = {\n  setSearch: (search: string[]) => void;\n  setTimezone: (timezone: string) => void;\n  state: State;\n  toggleTag: (filter: string, value: string, checked: boolean) => void;\n};\n\nexport function Filter({ setSearch, setTimezone, state, toggleTag }: Filter) {\n  const [open, setOpen] = useState(false);\n  return (\n    <Stack spacing={{ xs: 3, md: 6 }}>\n      <FormControl>\n        <Search search={state.search} setSearch={setSearch} />\n      </FormControl>\n      <Stack\n        d={{ xs: open ? 'block' : 'none', md: 'block' }}\n        spacing={{ xs: 3, md: 6 }}\n      >\n        {Object.keys(state.filters).map((filter: string, index: number) => (\n          <FormControl key={index}>\n            {state.filters[filter].map((tag: Tag, index: number) => (\n              <ButtonTag\n                filter={filter}\n                key={index}\n                tag={tag}\n                toggleTag={toggleTag}\n              />\n            ))}\n          </FormControl>\n        ))}\n        <FormControl d=\"block\" as=\"fieldset\">\n          <Select\n            aria-label=\"Timezone\"\n            borderColor=\"gray.300\"\n            icon=\"time\"\n            iconSize={4}\n            onChange={(e: React.FormEvent<HTMLSelectElement>) =>\n              setTimezone(e.currentTarget.value)\n            }\n            value={state.timezone}\n          >\n            {moment.tz.names().map((name: string, index: number) => (\n              <option key={index}>{name}</option>\n            ))}\n          </Select>\n        </FormControl>\n      </Stack>\n      <FormControl d={{ md: 'none' }}>\n        <Button\n          bg={open ? 'gray.100' : 'white'}\n          borderColor=\"gray.300\"\n          onClick={() => {\n            setOpen(!open);\n          }}\n          rightIcon={open ? 'chevron-up' : 'chevron-down'}\n          variant=\"outline\"\n          w=\"100%\"\n        >\n          {open ? 'Close' : 'Filters'}\n        </Button>\n      </FormControl>\n    </Stack>\n  );\n}\n","import React from 'react';\nimport { Box, Spinner } from '@chakra-ui/core';\n\nexport function Loading() {\n  return (\n    <Box alignItems=\"center\" d=\"flex\" height=\"100%\" justifyContent=\"center\">\n      <Spinner size=\"xl\" />\n    </Box>\n  );\n}\n","import React from 'react';\nimport { Button, Icon } from '@chakra-ui/core';\n\nexport type ButtonPrimaryProps = {\n  icon: 'link' | 'email' | 'phone' | 'small-close' | 'video';\n  onClick: () => void;\n  text: string;\n  title?: string;\n};\n\nexport function ButtonPrimary({\n  icon,\n  text,\n  title,\n  onClick\n}: ButtonPrimaryProps) {\n  return (\n    <Button\n      bg=\"blue.600\"\n      color=\"white\"\n      onClick={onClick}\n      title={title}\n      _hover={{ bg: 'blue.800' }}\n    >\n      <Icon name={icon} mr={2} />\n      {text}\n    </Button>\n  );\n}\n","import React from 'react';\nimport { Box, Heading, Stack, Text, Tag } from '@chakra-ui/core';\nimport Highlighter from 'react-highlight-words';\nimport { Moment } from 'moment-timezone';\nimport Linkify from 'react-linkify';\n\nimport { ButtonPrimary, ButtonPrimaryProps } from './ButtonPrimary';\n\nexport type Meeting = {\n  name: string;\n  time?: Moment;\n  buttons: ButtonPrimaryProps[];\n  notes: string[];\n  tags: string[];\n  updated: string;\n  search: string;\n};\n\nexport function Meeting({\n  meeting,\n  search,\n  tags\n}: {\n  meeting: Meeting;\n  search: string[];\n  tags: string[];\n}) {\n  return (\n    <Box\n      as=\"article\"\n      bg=\"white\"\n      border=\"1px\"\n      borderColor=\"gray.300\"\n      mb={{ xs: 3, md: 6 }}\n      p={5}\n      rounded=\"md\"\n      shadow=\"md\"\n    >\n      <Stack spacing={3}>\n        <Box alignItems=\"baseline\">\n          <Heading as=\"h2\" d={{ lg: 'inline' }} fontSize=\"2xl\">\n            <Highlighter searchWords={search} textToHighlight={meeting.name} />\n          </Heading>\n          <Heading\n            as=\"h3\"\n            color=\"gray.600\"\n            d={{ lg: 'inline' }}\n            fontSize=\"lg\"\n            fontWeight=\"normal\"\n            ml={{ lg: 2 }}\n          >\n            {!meeting.time ? 'Ongoing' : meeting.time.format('dddd h:mm a')}\n          </Heading>\n        </Box>\n        {!!meeting.buttons.length && (\n          <Box>\n            {meeting.buttons.map((button, index) => (\n              <Box float=\"left\" mr={2} my={1} key={index}>\n                <ButtonPrimary {...button} />\n              </Box>\n            ))}\n          </Box>\n        )}\n        {!!meeting.notes.length && (\n          <Stack spacing={3}>\n            {meeting.notes.map((paragraph: string, key: number) => (\n              <Text key={key}>\n                <Linkify>{paragraph}</Linkify>\n              </Text>\n            ))}\n          </Stack>\n        )}\n        {!!meeting.tags.length && (\n          <Box>\n            {meeting.tags.map((tag: string, index: number) => (\n              <Tag\n                bg={tags.includes(tag) ? 'gray.300' : 'gray.100'}\n                color={tags.includes(tag) ? 'gray.700' : 'gray.600'}\n                key={index}\n                mr={2}\n                my={1}\n                size=\"sm\"\n              >\n                {tag}\n              </Tag>\n            ))}\n          </Box>\n        )}\n      </Stack>\n    </Box>\n  );\n}\n","import React from 'react';\nimport { Alert, Box, Stack } from '@chakra-ui/core';\n\nimport { ButtonPrimary } from './ButtonPrimary';\nimport { State } from '../helpers/data';\n\ntype NoResults = {\n  state: State;\n  toggleTag: (filter: string, value: string, checked: boolean) => void;\n};\n\nexport function NoResults({ state, toggleTag }: NoResults) {\n  //get currrently active filters\n  const filters = Object.keys(state.filters)\n    .map(filter =>\n      state.filters[filter]\n        .filter(tag => tag.checked)\n        .map(tag => [filter, tag.tag])\n    )\n    .flat();\n  return (\n    <Alert flexDirection=\"column\" py={60} rounded=\"md\">\n      <Stack spacing={5} align=\"center\">\n        <Box>No results match the selected filters:</Box>\n        {filters.map(([filter, tag], index) => (\n          <Box>\n            <ButtonPrimary\n              key={index}\n              icon=\"small-close\"\n              onClick={() => {\n                toggleTag(filter, tag, false);\n              }}\n              text={tag}\n            />\n          </Box>\n        ))}\n      </Stack>\n    </Alert>\n  );\n}\n","//don't change this 👇 -- see README.md for help creating an .env file for your app\nconst sheetUrl = process.env.REACT_APP_GOOGLE_SHEET\n  ? process.env.REACT_APP_GOOGLE_SHEET\n  : 'https://docs.google.com/spreadsheets/d/1wER2LP3dT_6_LEQ8fSY1rv2bGzIZ2aaMBi_0Bt1aN3I/edit#gid=0';\n\nexport const dataUrl = `https://spreadsheets.google.com/feeds/list/${\n  sheetUrl.split('/')[5]\n}/1/public/values?alt=json`;\n\n//todo internationalize\nexport const days = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n];\n\n//number of meetings displayed (scroll to load more)\nexport const meetingsPerPage = 10;\n\n//any link is supported, but these conference URLs identified by service name\nexport const videoServices: { [key: string]: string[] } = {\n  BlueJeans: ['bluejeans.com'],\n  'Free Conference': ['freeconference.com'],\n  FreeConferenceCall: ['freeconferencecall.com'],\n  'Google Meet': ['meet.google.com'],\n  GoToMeeting: ['gotomeet.me', 'gotomeeting.com'],\n  Skype: ['skype.com'],\n  WebEx: ['webex.com'],\n  Zoho: ['zoho.com'],\n  Zoom: ['zoom.com', 'zoom.us']\n};\n","import moment from 'moment-timezone';\n\nimport { days, meetingsPerPage, videoServices } from './config';\nimport { Meeting } from '../components/Meeting';\n\n//types\nexport type Tag = { tag: string; checked: boolean };\n\nexport type State = {\n  filters: { [key: string]: Tag[] };\n  limit: number;\n  loading: boolean;\n  meetings: Meeting[];\n  search: string[];\n  timezone: string;\n};\n\n//parse google spreadsheet data into state object (runs once on init)\nexport function load(data: any): State {\n  const meetings: Meeting[] = [];\n  let formats: string[] = [];\n  let types: string[] = [];\n\n  //loop through json entries\n  for (let i = 0; i < data.feed.entry.length; i++) {\n    const meeting: Meeting = {\n      name: data.feed.entry[i]['gsx$name']['$t'].trim(),\n      buttons: [],\n      notes: stringToTrimmedArray(data.feed.entry[i]['gsx$notes']['$t'], '\\n'),\n      updated: data.feed.entry[i]['updated']['$t'],\n      search: '',\n      tags: []\n    };\n\n    //handle url\n    const originalUrl = data.feed.entry[i]['gsx$url']['$t'].trim();\n    if (originalUrl) {\n      let label;\n      let icon: 'link' | 'video' = 'link';\n      try {\n        const url = new URL(originalUrl);\n        const host = url.hostname;\n        const service = Object.keys(videoServices).filter(\n          service =>\n            videoServices[service].filter(domain => host.endsWith(domain))\n              .length\n        );\n        if (service.length) {\n          label = service[0];\n          icon = 'video';\n        } else {\n          label = url.hostname.replace('www.', '');\n        }\n        meeting.buttons.push({\n          icon: icon,\n          onClick: () => {\n            window.open(originalUrl, '_blank');\n          },\n          text: label,\n          title: 'Visit ' + originalUrl\n        });\n      } catch {\n        warn(originalUrl, 'URL', i);\n      }\n    }\n\n    //handle phone\n    const originalPhone = data.feed.entry[i]['gsx$phone']['$t'].trim();\n    if (originalPhone) {\n      let phone = originalPhone.replace(/\\D/g, '');\n      if (phone.length > 8) {\n        const accessCode = data.feed.entry[i]['gsx$accesscode']['$t'].trim();\n        if (accessCode.length) {\n          phone += ',,' + accessCode;\n        }\n        meeting.buttons.push({\n          icon: 'phone',\n          onClick: () => {\n            window.open('tel:' + phone);\n          },\n          text: 'Phone',\n          title: 'Call ' + phone\n        });\n      } else {\n        warn(originalPhone, 'phone number', i);\n      }\n    }\n\n    //handle email\n    const email = data.feed.entry[i]['gsx$email']['$t'].trim();\n    if (email) {\n      if (validateEmail(email)) {\n        meeting.buttons.push({\n          icon: 'email',\n          onClick: () => {\n            window.open('mailto:' + email);\n          },\n          text: 'Email',\n          title: 'Email ' + email\n        });\n      } else {\n        warn(email, 'email address', i);\n      }\n    }\n\n    //handle formats\n    const meeting_formats = stringToTrimmedArray(\n      data.feed.entry[i]['gsx$formats']['$t']\n    );\n\n    //append to formats array\n    meeting_formats.forEach((format: string) => {\n      if (!formats.includes(format)) {\n        formats.push(format);\n      }\n    });\n\n    //append to meeting tags\n    meeting.tags = meeting.tags.concat(meeting_formats);\n\n    //get types\n    const meeting_types = stringToTrimmedArray(\n      data.feed.entry[i]['gsx$types']['$t']\n    );\n\n    //append to types array\n    meeting_types.forEach(type => {\n      if (!types.includes(type)) {\n        types.push(type);\n      }\n    });\n\n    //append to meeting tags\n    meeting.tags = meeting.tags.concat(meeting_types);\n\n    //search index\n    meeting.search = meeting.name\n      .toLowerCase()\n      .split(' ')\n      .filter(e => e)\n      .join(' ');\n\n    //timezone\n    const timezone = data.feed.entry[i]['gsx$timezone']['$t'].trim();\n\n    //handle times\n    const times = stringToTrimmedArray(\n      data.feed.entry[i]['gsx$times']['$t'],\n      '\\n'\n    );\n\n    if (times.length) {\n      //loop through create an entry for each time\n      times.forEach(timestring => {\n        //momentize start time\n        const time = moment.tz(timestring, 'dddd h:mm a', timezone);\n\n        if (time.isValid()) {\n          //push a clone of the meeting onto the array\n          meetings.push({ ...meeting, time });\n        } else {\n          warn(timestring, 'time', i);\n        }\n      });\n    } else {\n      //ongoing meeting; add to meetings\n      meetings.push(meeting);\n    }\n  }\n\n  //sort\n  formats.sort();\n  types.sort();\n\n  //read query string\n  const query: { [key: string]: string[] } = {};\n  if (window.location.search.length > 1) {\n    window.location.search\n      .substr(1)\n      .split('&')\n      .forEach(pair => {\n        const [key, value] = pair.split('=');\n        query[key] = value.split(',').map(decodeURIComponent);\n      });\n  }\n\n  return {\n    filters: {\n      days: arrayToTagsArray(days, query.days || []),\n      formats: arrayToTagsArray(formats, query.formats || []),\n      types: arrayToTagsArray(types, query.types || [])\n    },\n    limit: meetingsPerPage,\n    loading: false,\n    meetings: meetings,\n    search: [],\n    timezone: moment.tz.guess()\n  };\n}\n\nfunction arrayToTagsArray(array: string[], values: string[]): Tag[] {\n  return array.map(tag => {\n    return { tag: tag, checked: values.includes(tag) };\n  });\n}\n\n//split \"foo, bar, baz\" into [\"foo\", \"bar\", \"baz\"]\nfunction stringToTrimmedArray(str: string, sep = ','): string[] {\n  return str\n    .split(sep)\n    .map(val => val.trim())\n    .filter(val => val);\n}\n\nfunction validateEmail(email: string) {\n  return /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n    email\n  );\n}\n\nfunction warn(value: string, type: string, line: number) {\n  console.warn(`Row ${line + 2}: “${value}” is not a valid ${type}.`);\n}\n","import React, { useState } from 'react';\nimport { Box, CSSReset, Grid, ThemeProvider, theme } from '@chakra-ui/core';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport { Filter } from './components/Filter';\nimport { Loading } from './components/Loading';\nimport { Meeting } from './components/Meeting';\nimport { NoResults } from './components/NoResults';\nimport { dataUrl, meetingsPerPage } from './helpers/config';\nimport { load, State } from './helpers/data';\nimport { filter } from './helpers/filter';\nimport { setQuery } from './helpers/query';\n\nexport default function App() {\n  const [state, setState] = useState<State>({\n    filters: {\n      Days: [],\n      Times: [],\n      Formats: [],\n      Types: []\n    },\n    limit: meetingsPerPage,\n    loading: true,\n    meetings: [],\n    search: [],\n    timezone: ''\n  });\n\n  //function to remove a tag\n  const toggleTag = (filter: string, value: string, checked: boolean): void => {\n    //loop through and add the tag\n    state.filters[filter].forEach(tag => {\n      if (tag.tag === value) {\n        tag.checked = checked;\n      } else if (['days', 'formats'].includes(filter)) {\n        //if we're setting a tag or format, uncheck the others\n        tag.checked = false;\n      }\n    });\n    //this will cause a re-render; the actual filtering is done in filterData\n    setState({ ...state });\n  };\n\n  if (state.loading) {\n    //on first render, get data\n    fetch(dataUrl)\n      .then(result => result.json())\n      .then(result => {\n        setState(load(result));\n      });\n  } else {\n    //on subsequent renders, set query string\n    setQuery(state);\n  }\n\n  //get currently-checked tags\n  const tags: string[] = Object.keys(state.filters)\n    .map(filter => {\n      return state.filters[filter]\n        .filter(value => value.checked)\n        .map(value => value.tag);\n    })\n    .flat();\n\n  const filteredMeetings = filter(state, tags);\n\n  const customTheme = {\n    ...theme,\n    icons: {\n      ...theme.icons,\n      video: {\n        path: (\n          <path\n            fill=\"currentColor\"\n            d=\"M16 16c0 1.104-.896 2-2 2h-12c-1.104 0-2-.896-2-2v-8c0-1.104.896-2 2-2h12c1.104 0 2 .896 2 2v8zm8-10l-6 4.223v3.554l6 4.223v-12z\"\n          />\n        )\n      }\n    }\n  };\n\n  return (\n    <ThemeProvider theme={customTheme}>\n      <CSSReset />\n      {state.loading ? (\n        <Loading />\n      ) : (\n        <Box as=\"main\" maxW={1240} minH=\"100%\" mx=\"auto\" p={{ xs: 3, md: 6 }}>\n          <Grid\n            as=\"section\"\n            gap={{ xs: 3, md: 6 }}\n            templateColumns={{ md: 'auto 300px' }}\n          >\n            <Box as=\"section\" order={{ xs: 1, md: 2 }}>\n              <Filter\n                setSearch={(search: string[]) => {\n                  setState({ ...state, search });\n                }}\n                setTimezone={(timezone: string) => {\n                  setState({ ...state, timezone });\n                }}\n                state={state}\n                toggleTag={toggleTag}\n              />\n            </Box>\n            <Box order={{ xs: 2, md: 1 }} overflow=\"hidden\">\n              {!filteredMeetings.length && (\n                <NoResults state={state} toggleTag={toggleTag} />\n              )}\n              {!!filteredMeetings.length && (\n                <InfiniteScroll\n                  loadMore={() => {\n                    const limit = state.limit + meetingsPerPage;\n                    setState({ ...state, limit });\n                  }}\n                  hasMore={filteredMeetings.length > state.limit}\n                >\n                  {filteredMeetings\n                    .slice(0, state.limit)\n                    .map((meeting: Meeting, index: number) => (\n                      <Meeting\n                        key={index}\n                        meeting={meeting}\n                        search={state.search}\n                        tags={tags}\n                      />\n                    ))}\n                </InfiniteScroll>\n              )}\n            </Box>\n          </Grid>\n        </Box>\n      )}\n    </ThemeProvider>\n  );\n}\n","import { State } from './data';\n\n//set the window query string to match the internal state\nexport function setQuery(state: State) {\n  //build query string\n  let query: string[] = [];\n  Object.keys(state.filters).forEach(key => {\n    const checkedValues = state.filters[key].filter(value => value.checked);\n    if (checkedValues.length) {\n      query.push(\n        key.concat(\n          '=',\n          checkedValues.map(value => encodeURIComponent(value.tag)).join(',')\n        )\n      );\n    }\n  });\n\n  //set query string\n  window.history.pushState(\n    '',\n    '',\n    query.length ? '?'.concat(query.join('&')) : window.location.pathname\n  );\n}\n","import moment from 'moment-timezone';\n\nimport { days } from './config';\nimport { State } from './data';\nimport { Meeting } from '../components/Meeting';\n\n//set time zones, apply filters, and sort meetings, runs on state change\nexport function filter(\n  { meetings, search, timezone }: State,\n  tags: string[]\n): Meeting[] {\n  //get current timestamp\n  const now = moment();\n  //const now = moment.tz('Saturday 8:12 PM', 'dddd h:mm a', timezone);\n\n  //loop through meetings for time operations\n  meetings.map(meeting => {\n    if (meeting.time) {\n      //convert timezone\n      meeting.time.tz(timezone);\n\n      //make all meetings upcoming\n      let diff = meeting.time.diff(now, 'minutes');\n\n      //with timezone weirdness, date could be more than a week ago\n      if (diff < -10080) {\n        meeting.time.add(1, 'week');\n        diff = meeting.time.diff(now, 'minutes');\n      }\n\n      //show meetings that started up to 10 minutes ago\n      if (diff < -10) {\n        meeting.time.add(1, 'week');\n      }\n\n      //add day to meeting tags\n      meeting.tags = meeting.tags.filter(tag => !days.includes(tag));\n      meeting.tags.push(meeting.time.format('dddd'));\n      meeting.tags.sort();\n    }\n\n    return meeting;\n  });\n\n  //filter meetings based on selected tags\n  if (tags.length) {\n    meetings = meetings.filter(meeting => {\n      for (let i = 0; i < tags.length; i++) {\n        if (!meeting.tags.includes(tags[i])) return false;\n      }\n      return true;\n    });\n  }\n\n  //search?\n  if (search) {\n    meetings = meetings.filter(meeting => {\n      return (\n        search\n          .map(word => {\n            return meeting.search.includes(word);\n          })\n          .filter(e => e).length === search.length\n      );\n    });\n  }\n\n  //sort meetings (by time then name)\n  meetings.sort((a: Meeting, b: Meeting) => {\n    if (a.time && b.time && !a.time.isSame(b.time)) {\n      return a.time.isAfter(b.time) ? 1 : -1;\n    } else if (a.time && !b.time) {\n      return -1;\n    } else if (b.time && !a.time) {\n      return 1;\n    }\n    return a.name.localeCompare(b.name);\n  });\n\n  //return\n  return meetings;\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}